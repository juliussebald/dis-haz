plot.title = element_text(hjust = 0.5, size=22, face="bold", vjust=1)) +
scale_x_continuous(expand = c(0.0, 0.0)) +
scale_y_continuous(limits= c(0,70), expand= c(0, 0)) +
facet_wrap(~ name_eng, ncol = 2)
View(names)
levels(landscape$name_eng)
elevation <- c( "SUBALPINE SPRUCE", "MONTANE SPRUCE", "SPRUCE-FIR", "SPRUCE-FIR-BEECH", "SILICAT PINE", "BEECH", "OAK DOMINATED")
landscape$species <- factor(landscape$species, levels = new_order_gg)
landscape$name_eng <- factor(landscape$name_eng, levels = elevation)
ggplot(landscape, aes(x = year, y = basal_mean, fill = species)) +
geom_area() +
scale_fill_manual(values=cols, guide=guide_legend(reverse=TRUE))+
labs(y="basal area [m²/ha]") +
#ggtitle("PNV")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, size=22, face="bold", vjust=1)) +
scale_x_continuous(expand = c(0.0, 0.0)) +
scale_y_continuous(limits= c(0,70), expand= c(0, 0)) +
facet_wrap(~ name_eng, ncol = 2)
levels(landscape$name_eng)
unique(landscape$name_eng)
landscape <- output %>%
map(., ~ dplyr::select(., year, species, basal_area_m2)) %>%
set_names(names$id) %>%
bind_rows(.id = "id") %>%
mutate(id = as.integer(id)) %>%
right_join(names, by = "id") %>%
group_by(name_eng, year, species) %>%
summarize(basal_mean = mean(basal_area_m2)) %>%
ungroup()
unique(landscape$name_eng)
cols=c("fasy"="#33CC33", "piab"="#006600", "quro"="#FF7F00", "qupe"="#FF9900", "qupu"="#CC9900", "abal"="#003300", "acca"="#F3F781", "acpl"="#86B404", "acps"="#58FAD0", "algl"="#61210B", "alin"="#A4A4A4", "alvi"="#0B3B17", "bepe"="#2E64FE", "cabe"="#F7BE81", "casa"="#A9F5A9", "coav"="#58D3F7", "frex"="#FF0000", "lade"="#8A4B08",  "pice"="#FFB90F", "pini"="#610B21", "pisy"="#B18904", "poni"="#000000", "potr"="#610B5E","saca"="#F5ECCE", "soar"="#E6E0F8", "soau"="#B40404", "tico"="#9F81F7", "tipl"="#8000FF", "ulgl"="#DF7401" )
new_order_gg=c("ulgl", "tipl", "tico", "soau", "soar", "saca", "potr", "poni", "pisy", "pini", "pice", "lade", "frex", "coav", "casa","cabe", "bepe", "alvi", "alin", "algl", "acps", "acpl", "acca", "abal","qupu", "qupe","quro", "piab", "fasy")
elevation <- c( "SUBALPINE SPRUCE", "MONTANE SPRUCE", "SPRUCE-FIR", "SPRUCE-FIR-BEECH", "SILICAT PINE", "BEECH", "OAK DOMINATED")
landscape$species <- factor(landscape$species, levels = new_order_gg)
landscape$name_eng <- factor(landscape$name_eng, levels = elevation)
unique(landscape$name_eng)
ggplot(landscape, aes(x = year, y = basal_mean, fill = species)) +
geom_area() +
scale_fill_manual(values=cols, guide=guide_legend(reverse=TRUE))+
labs(y="basal area [m²/ha]") +
#ggtitle("PNV")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, size=22, face="bold", vjust=1)) +
scale_x_continuous(expand = c(0.0, 0.0)) +
scale_y_continuous(limits= c(0,70), expand= c(0, 0)) +
facet_wrap(~ name_eng, ncol = 2)
head(landscape)
landscape <- output %>%
map(., ~ dplyr::select(., year, species, basal_area_m2)) %>%
set_names(names$id) %>%
bind_rows(.id = "id") %>%
mutate(id = as.integer(id)) %>%
right_join(names, by = "id")
cols=c("fasy"="#33CC33", "piab"="#006600", "quro"="#FF7F00", "qupe"="#FF9900", "qupu"="#CC9900", "abal"="#003300", "acca"="#F3F781", "acpl"="#86B404", "acps"="#58FAD0", "algl"="#61210B", "alin"="#A4A4A4", "alvi"="#0B3B17", "bepe"="#2E64FE", "cabe"="#F7BE81", "casa"="#A9F5A9", "coav"="#58D3F7", "frex"="#FF0000", "lade"="#8A4B08",  "pice"="#FFB90F", "pini"="#610B21", "pisy"="#B18904", "poni"="#000000", "potr"="#610B5E","saca"="#F5ECCE", "soar"="#E6E0F8", "soau"="#B40404", "tico"="#9F81F7", "tipl"="#8000FF", "ulgl"="#DF7401" )
new_order_gg=c("ulgl", "tipl", "tico", "soau", "soar", "saca", "potr", "poni", "pisy", "pini", "pice", "lade", "frex", "coav", "casa","cabe", "bepe", "alvi", "alin", "algl", "acps", "acpl", "acca", "abal","qupu", "qupe","quro", "piab", "fasy")
landscape$species <- factor(landscape$species, levels = new_order_gg)
head(landscape)
ggplot(landscape, aes(x = year, y = basal_mean, fill = species)) +
geom_area() +
scale_fill_manual(values=cols, guide=guide_legend(reverse=TRUE))+
labs(y="basal area [m²/ha]") +
#ggtitle("PNV")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, size=22, face="bold", vjust=1)) +
scale_x_continuous(expand = c(0.0, 0.0)) +
scale_y_continuous(limits= c(0,70), expand= c(0, 0)) +
facet_wrap(~ id, ncol = 2)
ggplot(landscape, aes(x = year, y = basal_area, fill = species)) +
geom_area() +
scale_fill_manual(values=cols, guide=guide_legend(reverse=TRUE))+
labs(y="basal area [m²/ha]") +
#ggtitle("PNV")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, size=22, face="bold", vjust=1)) +
scale_x_continuous(expand = c(0.0, 0.0)) +
scale_y_continuous(limits= c(0,70), expand= c(0, 0)) +
facet_wrap(~ id, ncol = 2)
ggplot(landscape, aes(x = year, y = basal_area_m2, fill = species)) +
geom_area() +
scale_fill_manual(values=cols, guide=guide_legend(reverse=TRUE))+
labs(y="basal area [m²/ha]") +
#ggtitle("PNV")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, size=22, face="bold", vjust=1)) +
scale_x_continuous(expand = c(0.0, 0.0)) +
scale_y_continuous(limits= c(0,70), expand= c(0, 0)) +
facet_wrap(~ id, ncol = 2)
ggplot(landscape, aes(x = year, y = basal_area_m2, fill = species)) +
geom_area() +
scale_fill_manual(values=cols, guide=guide_legend(reverse=TRUE))+
labs(y="basal area [m²/ha]") +
#ggtitle("PNV")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, size=22, face="bold", vjust=1)) +
scale_x_continuous(expand = c(0.0, 0.0)) +
scale_y_continuous(limits= c(0,70), expand= c(0, 0)) +
facet_wrap(~ id, ncol = 2)
ggplot(landscape, aes(x = year, y = basal_area_m2, fill = species)) +
geom_area() +
scale_fill_manual(values=cols, guide=guide_legend(reverse=TRUE))+
labs(y="basal area [m²/ha]") +
#ggtitle("PNV")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, size=22, face="bold", vjust=1)) +
scale_x_continuous(expand = c(0.0, 0.0)) +
scale_y_continuous(limits= c(0,70), expand= c(0, 0)) +
facet_wrap(~ id, ncol = 2)
ggplot(landscape, aes(x = year, y = basal_area_m2, fill = species)) +
geom_area() +
scale_fill_manual(values=cols, guide=guide_legend(reverse=TRUE))+
labs(y="basal area [m²/ha]") +
#ggtitle("PNV")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, size=22, face="bold", vjust=1)) +
scale_x_continuous(expand = c(0.0, 0.0)) +
scale_y_continuous(limits= c(0,80), expand= c(0, 0)) +
facet_wrap(~ id, ncol = 2)
landscape <- output %>%
map(., ~ dplyr::select(., year, species, basal_area_m2)) %>%
set_names(names$id) %>%
bind_rows(.id = "id") %>%
mutate(id = as.integer(id)) %>%
right_join(names, by = "id") %>%
group_by(name_eng, year, species) %>%
summarize(basal_mean = mean(basal_area_m2)) %>%
ungroup()
landscape <- output %>%
map(., ~ dplyr::select(., year, species, basal_area_m2)) %>%
set_names(names$id) %>%
bind_rows(.id = "id") %>%
mutate(id = as.integer(id)) %>%
right_join(names, by = "id") %>%
group_by(name_eng, year, species) %>%
summarize(basal_mean = mean(basal_area_m2)) %>%
ungroup()
cols=c("fasy"="#33CC33", "piab"="#006600", "quro"="#FF7F00", "qupe"="#FF9900", "qupu"="#CC9900", "abal"="#003300", "acca"="#F3F781", "acpl"="#86B404", "acps"="#58FAD0", "algl"="#61210B", "alin"="#A4A4A4", "alvi"="#0B3B17", "bepe"="#2E64FE", "cabe"="#F7BE81", "casa"="#A9F5A9", "coav"="#58D3F7", "frex"="#FF0000", "lade"="#8A4B08",  "pice"="#FFB90F", "pini"="#610B21", "pisy"="#B18904", "poni"="#000000", "potr"="#610B5E","saca"="#F5ECCE", "soar"="#E6E0F8", "soau"="#B40404", "tico"="#9F81F7", "tipl"="#8000FF", "ulgl"="#DF7401" )
new_order_gg=c("ulgl", "tipl", "tico", "soau", "soar", "saca", "potr", "poni", "pisy", "pini", "pice", "lade", "frex", "coav", "casa","cabe", "bepe", "alvi", "alin", "algl", "acps", "acpl", "acca", "abal","qupu", "qupe","quro", "piab", "fasy")
elevation <- c( "SUBALPINE SPRUCE", "MONTANE SPRUCE", "SPRUCE-FIR", "SPRUCE-FIR-BEECH", "SILICAT PINE", "BEECH", "OAK DOMINATED")
landscape$species <- factor(landscape$species, levels = new_order_gg)
landscape$name_eng <- factor(landscape$name_eng, levels = elevation)
ggplot(landscape, aes(x = year, y = basal_mean, fill = species)) +
geom_area() +
scale_fill_manual(values=cols, guide=guide_legend(reverse=TRUE))+
labs(y="basal area [m²/ha]") +
#ggtitle("PNV")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, size=22, face="bold", vjust=1)) +
scale_x_continuous(expand = c(0.0, 0.0)) +
scale_y_continuous(limits= c(0,80), expand= c(0, 0)) +
facet_wrap(~ name_eng, ncol = 2)
ggplot(landscape, aes(x = year, y = basal_mean, fill = species)) +
geom_area() +
scale_fill_manual(values=cols, guide=guide_legend(reverse=TRUE))+
labs(y="basal area [m²/ha]") +
#ggtitle("PNV")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
plot.title = element_text(hjust = 0.5, size=22, face="bold", vjust=1)) +
scale_x_continuous(expand = c(0.0, 0.0)) +
scale_y_continuous(limits= c(0,80), expand= c(0, 0)) +
facet_wrap(~ name_eng, ncol = 2)
{
Sys.setenv(USE_CXX14 = 1)
library(raster) # version 2.6-7
library(sp) # version 1.3-1
library(rgdal) # version 1.3-4
library(igraph) # version 1.2.2
library(tidyverse) # version 1.2.1
library(rstanarm) # version 2.17.4
library(projpred )# version 0.8.0
library(multiscales) # version 0.1.0 # devtools::install_github("clauswilke/multiscales")
library(patchwork) # version 0.0.1
library(rstan) # version 2.17.4
library(sf) # version 0.6-3
library(gridExtra) # version 2.3
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
rm(list=ls())
}
data <- read.csv("../data/data_for_model.csv")
processes <- c("MFL", "FST")
setwd("D:/JULIUS/PhD/Projects/disturbances_and_natural_hazards/methods/r/git/dis-haz/scripts")
data <- read.csv("../data/data_for_model.csv")
processes <- c("MFL", "FST")
processes_names <- c("Debris flow", "Flood")
vars_ws <- data.frame(varname = c("h_mean", "Melton", "Elevation", "Circularit", "Elongation",
"artifical", "forest", "area", "patchdensity",
"eco_region",
"extent",
"type",
"extent:type"),
name = c("Elevation", "Melton ratio", "Elevation ratio", "Circularity", "Elongation",
"Infrastructure", "Forest cover", "Area", "Patch density",
"Ecological region",
"Extent",
"Type",
"Extent x Type"),
stringsAsFactors = FALSE)
load(file =  "../results/count/models_count.RData")
final_models <- models %>% map(., ~ .[[1]][[5]])
vars_nointeraction <- vars_ws %>%
filter(!varname %in% c("extent:type", "eco_region"))
data_model <- data
data_model[data_model$extent == 0, "type"] <- NA
data_model <- data_model %>%
mutate_at(.vars = vars(c(vars_nointeraction$varname)), function(x) (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE))
data_model[data_model$extent == min(data_model$extent), "type"] <- 0
max_event <- 7
response_disturbance <- expand.grid(eco_region = factor(1),
h_mean = 0,
Circularit = 0,
Elongation = 0,
artifical = 0,
area = 0,
patchdensity = 0,
forest = 0,
Elevation = 0,
Melton = 0,
extent = c((0.5 - mean(data$extent)) / sd(data$extent),
(0.1 - mean(data$extent)) / sd(data$extent)),
type = c(quantile(data_model$type, 0.05), 0, quantile(data_model$type, 0.95)))  # viele EZGs haben Pulisty kleiner als -1
predictions_debris <- final_models[[1]] %>%
posterior_predict(., newdata = response_disturbance, transform = TRUE)
plotdata_debris <- predictions_debris %>%
as.data.frame(.) %>%
mutate(draw = as.integer(1:4000)) %>%
gather(., key = key, value = count, -draw) %>%
group_by(key, count) %>%
summarize(n = length(count)) %>%
group_by(key) %>%
mutate(p = (n / sum(n))) %>%
ungroup() %>%
dplyr::select(-n) %>%
spread(key = count, value = p) %>%
bind_cols(response_disturbance) %>%
gather(key = count, value = p, -key, -(eco_region:type)) %>%
filter(count %in% 1:max_event) %>%
mutate(type = factor(type, labels =  c("Press", "Average", "Pulse"))) %>%
mutate(extent = factor(extent, labels =  c("Small extent (10%)", "Large extent (50%)")))
p_debris <- ggplot(plotdata_debris, aes(x = factor(count, levels = 1:max_event), y = (p / length(1986:2018)), fill = factor(type))) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~extent) +
theme_bw() +
theme(legend.background = element_blank(),
legend.position = "right",
legend.justification = c(1, 1),
#legend.text = element_text(size = 9),
panel.grid = element_blank(),
strip.background = element_blank(),
plot.title = element_text(size = 11)) +
labs(x = "Number of events", y = bquote("Probability (%"*yr^-1*")"),
fill = "Disturbance type", title = "a) Debris flow") +
#scale_fill_manual(values = RColorBrewer::brewer.pal(6, name = "Reds")[c(2, 4, 6)]) +
scale_fill_brewer(palette = "Set1") +
scale_y_continuous(labels = function(x) round(x * 100, 3))
response_disturbance <- expand.grid(eco_region = factor(1),
h_mean = 0,
Circularit = 0,
Elongation = 0,
artifical = 0,
area = 0,
patchdensity = 0,
forest = 0,
Elevation = 0,
Melton = 0,
extent = 0,
type = c(quantile(data_model$type, 0.05), 0, quantile(data_model$type, 0.95)))  # viele EZGs haben Pulisty kleiner als -1
predictions_flood <- final_models[[2]] %>%
posterior_predict(., newdata = response_disturbance, transform = TRUE)
plotdata_flood <- predictions_flood %>%
as.data.frame(.) %>%
mutate(draw = as.integer(1:4000)) %>%
gather(., key = key, value = count, -draw) %>%
group_by(key, count) %>%
summarize(n = length(count)) %>%
group_by(key) %>%
mutate(p = (n / sum(n))) %>%
ungroup() %>%
dplyr::select(-n) %>%
spread(key = count, value = p) %>%
bind_cols(response_disturbance) %>%
gather(key = count, value = p, -key, -(eco_region:type)) %>%
filter(count %in% 1:max_event) %>%
mutate(type = factor(type, labels =  c("Press", "Average", "Pulse")))
p_flood <- ggplot(plotdata_flood, aes(x = factor(count, levels = 1:max_event), y = (p / length(1986:2018)), fill = factor(type))) +
geom_bar(stat = "identity", position = "dodge") +
theme_bw() +
theme(legend.background = element_blank(),
legend.position = "right",
legend.justification = c(1, 1),
legend.text = element_text(size = 9),
panel.grid = element_blank(),
strip.background = element_blank(),
plot.title = element_text(size = 11)) +
labs(x = "Number of events", y = bquote("Probability (%"*yr^-1*")"),
fill = "Disturbance type", title = "b) Flood") +
#scale_fill_manual(values = RColorBrewer::brewer.pal(6, name = "Reds")[c(2, 4, 6)]) +
scale_fill_brewer(palette = "Set1") +
scale_y_continuous(labels = function(x) round(x * 100, 3)) +
guides(fill = guide_legend(keyheight = 0.4, keywidth = 0.6))
p_response <- p_debris + theme(legend.position = "none") +
p_flood +
plot_layout(ncol = 2, width = c(2, 1))
p_response
ggsave("expected_counts.pdf", p_response, path = "../results/count/", width = 7.5, height = 2.5)
ggsave("expected_counts.png", p_response, path = "../../../../../results/figures/", width = 7.5, height = 2.5)
ggsave("expected_counts.png", p_response, path = "../../../../../results/figures/", width = 7, height = 3.5)
ggsave("expected_counts.png", p_response, path = "../../../../../results/figures/", width = 5, height = 3.5)
ggsave("expected_counts.png", p_response, path = "../../../../../results/figures/", width = 5, height = 2.5)
ggsave("expected_counts.png", p_response, path = "../../../../../results/figures/", width = 7.5, height = 2.5)
ggsave("expected_counts.png", p_response, path = "../../../../../results/figures/", width = 6, height = 2)
ggsave("expected_counts.png", p_response, path = "../../../../../results/figures/", width = 9, height = 3)
ggsave("expected_counts.png", p_response, path = "../../../../../results/figures/", width = 7.5, height = 3.5)
ggsave("expected_counts.png", p_response, path = "../../../../../results/figures/", width = 7, height = 3.5)
ggsave("expected_counts.png", p_response, path = "../../../../../results/figures/", width = 7, height = 3)
plotdata_debris %>%
filter(count == 1) %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
dplyr::select(type, extent, prop_report)
plotdata_debris %>%
filter(count > 1) %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
dplyr::select(type, extent, prop_report)
head(plotdata_debris)
View(plotdata_debris)
plotdata_debris %>%
filter(extent == "Large extent (50%)" & type = "Press")
plotdata_debris %>%
filter(extent == "Large extent (50%)" & type == "Press")
plotdata_debris %>%
filter(extent == "Large extent (50%)" & type == "Press")
worst <- plotdata_debris %>%
filter(extent == "Large extent (50%)" & type == "Press" & count > 1)
worst <- plotdata_debris %>%
filter(extent == "Large extent (50%)" & type == "Press" & count > 1) %>%
group_by(extent, type) %>%
summarize(p.sum = sum(p))
worst
two.or.more <- plotdata_debris %>%
filter(extent == "Large extent (50%)" & type == "Press" & count > 1)
two.or.more
two.or.more.best <- plotdata_debris %>%
filter(extent == "Small extent (10%)" & type == "Pulse" & count > 1)
two.or.more.best
worst <- sum(two.or.more.worst$p)
two.or.more.worst <- plotdata_debris %>%
filter(extent == "Large extent (50%)" & type == "Press" & count > 1)
two.or.more.best <- plotdata_debris %>%
filter(extent == "Small extent (10%)" & type == "Pulse" & count > 1)
worst <- sum(two.or.more.worst$p)
worst <- sum(two.or.more.worst$p)
best <- sum(two.or.more.best$p)
worst / best
best
two.or.more.best <- plotdata_debris %>%
filter(extent == "Small extent (10%)" & type == "Pulse" & count > 1) %>%
na.omit()
best <- sum(two.or.more.best$p)
best
worst
worst / best
worst/best - 1 *100
(worst/best - 1) *100
worst
best
(worst/best - 1) *100
View(plotdata_debris)
View(plotdata_flood)
one.worst <- plotdata_flood %>%
filter(type == "Press" & count == 1)
one.best <- plotdata_debris %>%
filter(type == "Pulse" & count == 1)
one.worst
one.best
one.best <- plotdata_flood %>%
filter(type == "Pulse" & count == 1)
one.best
worst <- one.worst$p
best <- one.best$p
(worst/best - 1) *100
worst
best
two.or.more.worst <- plotdata_flood %>%
filter(type == "Press" & count > 1)
two.or.more.best <- plotdata_flood %>%
filter(type == "Pulse" & count > 1)
two.or.more.worst
two.or.more.best
two.or.more.best <- plotdata_flood %>%
filter(type == "Pulse" & count > 1) %>%
na.omit()
worst <- sum(two.or.more.worst$p) %>%
print(.)
best <- sum(two.or.more.best$p) %>%
print(.)
(worst/best - 1) *100
p_response
one.worst <- plotdata_flood %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(type == "Press" & count == 1)
one.best <- plotdata_flood %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(type == "Pulse" & count == 1)
worst <- one.worst$prop_report
best <- one.best$prop_report
(worst/best - 1) *100
worst <- one.worst$prop_report %>%
print(.)
best <- one.best$prop_report %>%
print(.)
(worst/best - 1) *100
two.or.more.worst <- plotdata_flood %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(type == "Press" & count > 1)
two.or.more.best <- plotdata_flood %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(type == "Pulse" & count > 1) %>%
na.omit()
worst <- sum(two.or.more.worst$prop_report) %>%
print(.)
best <- sum(two.or.more.best$prop_report) %>%
print(.)
(worst/best - 1) *100
two.or.more.worst <- plotdata_debris %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(extent == "Large extent (50%)" & type == "Press" & count > 1)
two.or.more.best <- plotdata_debris %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(extent == "Small extent (10%)" & type == "Pulse" & count > 1) %>%
na.omit()
worst <- sum(two.or.more.worst$prop_report) %>%
print(.)
best <- sum(two.or.more.best$prop_report) %>%
print(.)
(worst/best - 1) *100
two.or.more.worst <- plotdata_debris %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(extent == "Large extent (50%)" & type == "Press" & count > 1)
two.or.more.best <- plotdata_debris %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(extent == "Small extent (10%)" & type == "Press" & count > 1) %>%
na.omit()
worst <- sum(two.or.more.worst$prop_report) %>%
print(.)
best <- sum(two.or.more.best$prop_report) %>%
print(.)
(worst/best - 1) *100
two.or.more.worst <- plotdata_debris %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(extent == "Large extent (50%)" & type == "Average" & count > 1)
two.or.more.best <- plotdata_debris %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(extent == "Small extent (10%)" & type == "Average" & count > 1) %>%
na.omit()
worst <- sum(two.or.more.worst$prop_report) %>%
print(.)
two.or.more.worst <- plotdata_debris %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(extent == "Large extent (50%)" & type == "Average" & count > 1) %>%
na.omit()
two.or.more.best <- plotdata_debris %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(extent == "Small extent (10%)" & type == "Average" & count > 1) %>%
na.omit()
worst <- sum(two.or.more.worst$prop_report) %>%
print(.)
best <- sum(two.or.more.best$prop_report) %>%
print(.)
(worst/best - 1) *100
two.or.more.worst <- plotdata_debris %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(extent == "Large extent (50%)" & type == "Press" & count > 1) %>%
na.omit()
two.or.more.best <- plotdata_debris %>%
mutate(prop_report = p / length(1986:2018) * 100) %>%
filter(extent == "Small extent (10%)" & type == "Press" & count > 1) %>%
na.omit()
worst <- sum(two.or.more.worst$prop_report) %>%
print(.)
best <- sum(two.or.more.best$prop_report) %>%
print(.)
(worst/best - 1) *100
